package net.jplugin.core.das.route.impl.conn;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import net.jplugin.core.das.route.impl.conn.NotPreparedStatementUtil.Result;

public class RouterStatement extends EmptyStatement {
	RouterConnection connection;
	ExecuteResult executeResult = new ExecuteResult();
	String sql;

	public static Statement create(RouterConnection conn) {
		RouterStatement cs = new RouterStatement();
		cs.connection = conn;
		return cs;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		ResultSet rs = stmt.executeQuery(sql);
		
		return rs;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		int cnt = stmt.executeUpdate(sql);
		
		return cnt;
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		Result rr = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = rr.statement;
		sql = rr.resultSql;
		boolean r = stmt.execute(sql);
		
		return r;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return executeResult.getResult();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return executeResult.getUpdateCount();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		int cnt = stmt.executeUpdate(sql, autoGeneratedKeys);
		
		return cnt;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		int cnt = stmt.executeUpdate(sql, columnIndexes);
		
		return cnt;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		int cnt = stmt.executeUpdate(sql, columnNames);
		
		return cnt;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		boolean b = stmt.execute(sql, autoGeneratedKeys);
		return b;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		boolean b = stmt.execute(sql, columnIndexes);
		return b;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		Result r = NotPreparedStatementUtil.genTargetNotPreparedStatement(this.executeResult,connection, sql);
		Statement stmt = r.statement;
		sql = r.resultSql;
		boolean b = stmt.execute(sql, columnNames);
		return b;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return false;
	}

	@Override
	public void close() throws SQLException {
		this.executeResult.clear();
	}
	
	@Override
	public boolean getMoreResults() throws SQLException {
		return this.executeResult.getMoreResults();
	}
}
