package net.jplugin.core.das.route.impl.conn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class RouterStatement extends EmptyStatement{
	RouterConnection connection;
	ExecuteResult executeResult = new ExecuteResult();
	String sql;
	
	class ExecuteResult {
		ResultSet rs;
		int updCount = -1;
		public void clear() {
			rs = null;
			updCount = -1;
		}
		public void fetch() throws SQLException{
			rs = getResultSet();
			updCount = getUpdateCount();
		}
	}
	
	public static Statement create(RouterConnection conn) {
		RouterStatement cs = new RouterStatement();
		cs.connection = conn;
		return cs;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		ResultSet rs = stmt.executeQuery(sql);
		executeResult.fetch();
		return rs;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql);
		executeResult.fetch();
		return cnt;
	}


	@Override
	public boolean execute(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean r = stmt.execute(sql);
		executeResult.fetch();
		return r;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return executeResult.rs;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return executeResult.updCount;
	}

	@Override
	public Connection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,autoGeneratedKeys);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,columnIndexes);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,columnNames);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean b = stmt.execute(sql,autoGeneratedKeys);
		executeResult.fetch();
		return b;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean b = stmt.execute(sql,columnIndexes);
		executeResult.fetch();
		return b;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean b = stmt.execute(sql,columnNames);
		executeResult.fetch();
		return b;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return false;
	}

	@Override
	public void close() throws SQLException {
	}

}
