package net.jplugin.core.das.route.impl.conn;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.sql.DataSource;

import net.jplugin.core.das.api.DataSourceFactory;
import net.jplugin.core.das.route.api.SqlHandleService;
import net.jplugin.core.das.route.api.TablesplitException;
import net.jplugin.core.das.route.impl.util.CallableList;
import net.jplugin.core.das.route.impl.util.MyCallable;

public class RouterPrearedStatement extends EmptyPreapredStatement{
	CallableList<PreparedStatement>  list = new CallableList<PreparedStatement>();
	String sql;
//	List<Object> params=new ArrayList<Object>();
	SqlParamRecoder recorder = new SqlParamRecoder();
	RouterConnection connection;
	ExecuteResult executeResult = new ExecuteResult();
	
	public static PreparedStatement create(String sql, RouterConnection compondConnection) {
		RouterPrearedStatement s = new RouterPrearedStatement();
		s.sql = sql;
		s.connection = compondConnection;
		return s;
	}
	
	class ExecuteResult {
		ResultSet rs;
		int updCount = -1;
		public void clear() {
			rs = null;
			updCount = -1;
		}
		public void fetch() throws SQLException{
			rs = getResultSet();
			updCount = getUpdateCount();
		}
	}
	
	@Override
	public boolean execute() throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = genTargetStatement();
		boolean result = stmt.execute();
		executeResult.fetch();
		return result;
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		executeResult.clear(); 
		PreparedStatement stmt = genTargetStatement();
		ResultSet rs = stmt.executeQuery();
		executeResult.fetch();
		return rs;
	}

	@Override
	public int executeUpdate() throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = genTargetStatement();
		int cnt = stmt.executeUpdate();
		executeResult.fetch();
		return cnt;
		
	}


	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		ResultSet rs = stmt.executeQuery(sql);
		executeResult.fetch();
		return rs;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public void close() throws SQLException {
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean result =  stmt.execute(sql);
		executeResult.fetch();
		return result;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,autoGeneratedKeys);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,columnIndexes);
		executeResult.fetch();
		return cnt;
	}
	

	@Override
	public ResultSet getResultSet() throws SQLException {
		return executeResult.rs;
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return executeResult.updCount;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		int cnt = stmt.executeUpdate(sql,columnNames);
		executeResult.fetch();
		return cnt;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean result = stmt.execute(sql,autoGeneratedKeys);
		executeResult.fetch();
		return result;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean result = stmt.execute(sql,columnIndexes);
		executeResult.fetch();
		return result;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		executeResult.clear();
		PreparedStatement stmt = NotPreparedStatementUtil.genTargetNotPreparedStatement(connection,sql);
		boolean result = stmt.execute(sql,columnNames);
		executeResult.fetch();
		return result;
	}


	private PreparedStatement genTargetStatement() throws SQLException {
		executeResult.clear();
		if (sql==null) throw new TablesplitException("No sql found");
		SqlHandleResult shr = SqlHandleService.INSTANCE.handle(connection,sql,recorder.getList());

		DataSource tds = DataSourceFactory.getDataSource(shr.getTargetDataSourceName());
		if (tds==null) throw new TablesplitException("Can't find target datasource."+shr.getTargetDataSourceName());
		
		PreparedStatement stmt = tds.getConnection().prepareStatement(shr.getResultSql());
		list.executeWith(stmt);
		return stmt;
	}
	@Override
	public boolean isClosed() throws SQLException {
		return false;
	}
	
	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNull(parameterIndex, sqlType);
			}
		});
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBoolean(parameterIndex, x);
			}
		});
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setByte(parameterIndex, x);
			}
		});
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setShort(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setInt(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setLong(parameterIndex, x);
			}
		});
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setFloat(parameterIndex, x);
			}
		});
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setDouble(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBigDecimal(parameterIndex, x);
			}
		});
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setString(parameterIndex, x);	
			}
		});
		
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBytes(parameterIndex, x);
				
			}
		});
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setDate(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setTime(parameterIndex, x);
			}
		});
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setTimestamp(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setAsciiStream(parameterIndex, x,length);
			}
		});
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setUnicodeStream(parameterIndex, x, length);
			}
		});
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBinaryStream(parameterIndex, x,length);
			}
		});
	}

	@Override
	public void clearParameters() throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.clearParameters();
			}
		});
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setObject(parameterIndex, x,targetSqlType);
			}
		});
		
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setObject(parameterIndex, x);
			}
		});
	}



	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setCharacterStream(parameterIndex, reader, length);
			}
		});
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setRef(parameterIndex, x);
				
			}
		});
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBlob(parameterIndex, x);
				
			}
		});
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setClob(parameterIndex, x);
			}
		});
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setArray(parameterIndex, x);
			}
		});
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setDate(parameterIndex, x, cal);
			}
		});
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setTime(parameterIndex, x, cal);
			}
		});
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setTimestamp(parameterIndex, x, cal);
			}
		});
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNull(parameterIndex, sqlType, typeName);
			}
		});
		
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setURL(parameterIndex, x);
			}
		});
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		recorder.set(parameterIndex, value);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNString(parameterIndex, value);
			}
		});
		
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNCharacterStream(parameterIndex, value,length);
			}
		});
		
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNClob(parameterIndex,value);
			}
		});
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setClob(parameterIndex, reader, length);
			}
		});
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBlob(parameterIndex, inputStream, length);
			}
		});
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNClob(parameterIndex, reader, length);
			}
		});
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setSQLXML(parameterIndex, xmlObject);
			}
		});
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		recorder.set(parameterIndex, x);
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
			}
		});
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setAsciiStream(parameterIndex, x, length);
			}
		});
		
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBinaryStream(parameterIndex, x, length);
			}
		});
		
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setCharacterStream(parameterIndex, reader, length);
			}
		});
		
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setAsciiStream(parameterIndex, x);
			}
		});
		
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBinaryStream(parameterIndex, x);
			}
		});
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setCharacterStream(parameterIndex, reader);
			}
		});
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNCharacterStream(parameterIndex, value);
			}
		});
		
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setClob(parameterIndex, reader);
				
			}
		});
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setBlob(parameterIndex, inputStream);
			}
		});
		
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		list.add(new MyCallable<PreparedStatement>() {
			
			@Override
			public void call(PreparedStatement t) throws SQLException {
				t.setNClob(parameterIndex, reader);
			}
		});
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.connection;
	}

}
